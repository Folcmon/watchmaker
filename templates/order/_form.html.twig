{% macro printUsedPartsRow(form) %}
    <div class="row used-part-item mb-4">
        <div class="col-8">
            <div class="form-group">
                {{ form_widget(form.storage, {'attr': {'class': 'select2'}}) }}

            </div>
        </div>
        <div class="col-2">
            <div class="form-group">
                {{ form_widget(form.quantity) }}
            </div>
        </div>
        <div class="col-2">
            <div class="form-group">
                {{ form_widget(form.delete, {'attr': {'class': 'btn btn-danger delete-part-btn'}}) }}
            </div>
        </div>
    </div>
{% endmacro %}

{% import _self as formTheme %}

{{ form_start(form) }}
<div class="form-group mb-4">
    <label class="col-form-label">
        {{ "Robocizna zÅ‚"|trans }}
    </label>
    <div class="">
        {{ form_errors(form.labor) }}
    </div>
    {{ form_widget(form.labor, {'attr':{'class':'form-control'}}) }}
</div>

<div class="form-group mb-4">
    <label class="col-form-label">
        {{ "Data przyjÄ™cia do serwisu"|trans }}
    </label>
    <div class="">
        {{ form_errors(form.orderAcceptanceDate) }}
    </div>
    {{ form_widget(form.orderAcceptanceDate, {'attr':{'class':'form-control'}}) }}
</div>

<div class="form-group mb-4">
    <label class="col-form-label">
        {{ "Stopa VAT robocizny"|trans }}
    </label>
    <div class="">
        {{ form_errors(form.laborVatRate) }}
    </div>
    {{ form_widget(form.laborVatRate, {'attr':{'class':'form-control'}}) }}
</div>
<div class="form-group mb-4">
    <label class="col-form-label">
        {{ "Nazwa usÅ‚ugi"|trans }}
    </label>
    <div class="">
        {{ form_errors(form.name) }}
    </div>
    {{ form_widget(form.name, {'attr':{'class':'form-control'}}) }}
</div>
<div class="form-group mb-4">
    <label class="col-form-label">
        {{ "Opis usÅ‚ugi"|trans }}
    </label>
    <div class="">
        {{ form_errors(form.description) }}
    </div>
    {{ form_widget(form.description, {'attr':{'class':'form-control'}}) }}
</div>
<div class="form-group mb-4">
    <label class="col-form-label">
        {{ "ZaÅ‚Ä…czniki"|trans }}
    </label>
    <!------------upload nowy plikÃ³w----------------->
    <div id="upload-area" class="mb-4"></div>
    <script>
        const uppy = new Uppy.Uppy(
                {
                    debug: true,
                    autoProceed:
                        false, // UÅ¼ytkownik sam zatwierdza upload
                    restrictions:
                        {
                            maxNumberOfFiles: 5, allowedFileTypes:
                                ['image/*']
                        },
                    locale: Uppy.locales.pl_PL,
                }
            )
        ;

        uppy.use(Uppy.Dashboard, {
            inline: true,
            target: '#upload-area',
            showProgressDetails: true,
            proudlyDisplayPoweredByUppy: false
        });

        // ObsÅ‚uga kamery ðŸ“¸
        uppy.use(Uppy.Webcam, {target: Uppy.Dashboard});

        // WysyÅ‚anie na backend Symfony
        uppy.use(Uppy.XHRUpload, {
            endpoint: '{{ path('file_upload') }}', // API backendu Symfony
            fieldName: 'file', // Musi pasowaÄ‡ do klucza w $_FILES
            formData: true
        });

        // ObsÅ‚uga zakoÅ„czonego uploadu
        uppy.on('complete', (result) => {
            //add uploaded files ids to input as order['orderAttachments'][] array as prototype form
            let uploadedFiles = result.successful.map(file => file.response.body.fileId);
            let input = document.querySelector('input[name="order[orderAttachments][]"]');
            //if input exist add hidden inputs with uploaded files ids else create new input
            if (input) {
                uploadedFiles.forEach(fileId => {
                    let hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'order[orderAttachments][]';
                    hiddenInput.value = fileId;
                    input.after(hiddenInput);
                });
            } else {
                let hiddenInputs = uploadedFiles.map(fileId => {
                    let hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'order[orderAttachments][]';
                    hiddenInput.value = fileId;
                    return hiddenInput;
                });
                hiddenInputs.forEach(hiddenInput => {
                    document.querySelector('form').appendChild(hiddenInput);
                });
            }
            console.log('Upload zakoÅ„czony!', result.successful);
        });
    </script>
    <!------------upload nowy plikÃ³w----------------->
    <div class="">
        {{ form_errors(form.orderAttachments) }}
    </div>
    {{ form_widget(form.orderAttachments, {'attr':{'class':'d-none'}}) }}
    <div class="row">
        {% for orderAttachment in order.orderAttachments %}
            <div class="col-md-3 mb-4 attachment-card-item">
                <div class="card custom-card">
                    <img src="{{ asset('uploads/' ~ orderAttachment.file.path) }}" class="card-img-top"
                         alt="Attachment">
                    <div class="card-body custom-card-body text-center">
                        <button type="button" class="btn btn-danger delete-attachment-btn"
                                data-id="{{ orderAttachment.id }}">
                            {{ "UsuÅ„"|trans }}
                        </button>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>
<div class="form-group mb-4">
    <label class="col-form-label">
        {{ "Klient"|trans }}
    </label>
    <div class="">
        {{ form_errors(form.client) }}
    </div>
    <div class="input-group">
        {{ form_widget(form.client, {'attr':{'class':'form-control select2'}}) }}
        <span class="input-group-text add-client-button">
            <i class='bx bx-folder-plus'></i>
        </span>
    </div>
</div>

<div class="form-group mb-4">
    <label class="col-form-label">
        {{ "Status"|trans }}
    </label>
    <div class="">
        {{ form_errors(form.status) }}
    </div>
    {{ form_widget(form.status, {'attr':{'class':'form-control'}}) }}
</div>

<div class="form-group mb-4">
    <div class="row">
        <label class="col-form-label h2">
            {{ "MateriaÅ‚y"|trans }}
        </label>
    </div>
    <div class="row mb-4">
        <div class="col-md-12 used-parts-container"
             data-prototype="{{ formTheme.printUsedPartsRow(form.realisedServiceUsedItems.vars.prototype)|e('html_attr') }}">
            <div class="row">
                <div class="col-md-12 mb-4">
                    <span class="btn btn-success used-part-addition-button btn-lg"
                          data-collection-holder-class="usedParts">{{ "Dodaj uÅ¼ytÄ… czÄ™Å›Ä‡"|trans }}</span>
                </div>
                {% for part in form.realisedServiceUsedItems %}
                    {{ formTheme.printUsedPartsRow(part) }}
                {% endfor %}
            </div>
        </div>
    </div>
</div>
<div class="form-group mb-4">
    <button class="btn btn-primary float-end btn-lg btn-lg">{{ "Zapisz"|trans }}</button>
</div>
{{ form_end(form) }}

<!-- Modal for add new client -->
<div id="client-add-modal" class="modal fade" tabindex="-1" aria-labelledby="client-modal" aria-hidden="true">
    <div>
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">{{ "Dodaj klienta"|trans }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal for add new client -->
<script>
    //used parts js logic
    let modal = new bootstrap.Modal($('#client-add-modal')[0]);
    document.addEventListener('DOMContentLoaded', function () {
        // Elementy referencyjne
        let container = document.querySelector('.used-parts-container');
        let addButton = document.querySelector('.used-part-addition-button');

        // Prototype formularza
        let prototype = container.dataset.prototype;
        let index = {{ form.realisedServiceUsedItems|length }};
        // Dodanie nowej czÄ™Å›ci
        addButton.addEventListener('click', function () {
            let newForm = prototype.replace(/__name__/g, index);
            container.insertAdjacentHTML('beforeend', newForm);
            index++;
            initializeSelect2('.select2');
        });

        // Usuwanie czÄ™Å›ci po klikniÄ™ciu
        container.addEventListener('click', function (event) {
            if (event.target && event.target.classList.contains('delete-part-btn')) {
                event.target.closest('.used-part-item').remove();
            }
        });
    });
    //when user click on add button make ajax call for add client form to add new one
    $(document).ready(function () {
        // Add client button
        $('.add-client-button').on('click', function () {
            let url = '{{ path('app_client_new_ajax') }}';
            $.get(url, function (data) {
                let html = $(data);
                $('#client-add-modal .modal-body').html(html);
                modal.show();
            });
        });
        // Add client form submit
        $(document).on('submit', '#client-form', function (event) {
            event.preventDefault();
            event.stopPropagation();
            let form = $('#client-add-modal form');
            let url = "{{ path('app_client_new_ajax') }}";
            let data = form.serialize();
            $.post(url, data, function (response) {
                if (response.status === 'success') {
                    let client = response.client;
                    let option = new Option(client.name, client.id, true, true);
                    $('#order_client').append(option).trigger('change');
                    modal.hide();
                } else {
                    $('#client-add-modal .modal-body').html(response);
                }
            });
        });
    });
</script>

<script>
    $(document).ready(function () {
        $('.delete-attachment-btn').on('click', function () {
            let attachmentId = $(this).data('id');
            let url = '{{ path('app_order_attachment_delete', {'id': 'ATTACHMENT_ID'}) }}'.replace('ATTACHMENT_ID', attachmentId);
            $.ajax({
                url: url,
                type: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': '{{ csrf_token('delete') }}' + attachmentId
                },
                success: function (response) {
                    if (response.message === 'ZaÅ‚Ä…cznik usuniÄ™ty') {
                        $(`button[data-id="${attachmentId}"]`).parents('.attachment-card-item').remove();
                        //also remove hidden input with deleted file id
                        let input = document.querySelector(`input[value="${attachmentId}"]`);
                        if (input) {
                            input.remove();
                        }
                    } else {
                        console.error('Failed to delete attachment');
                    }
                },
                error: function () {
                    console.error('Failed to delete attachment');
                }
            });
        });
    });
</script>